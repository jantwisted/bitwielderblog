.. title: Docker with Systemd
.. slug: docker-with-systemd
.. date: 2017-08-07 15:50:40 UTC
.. tags: docker, centos, systemd 
.. category: tech
.. link: 
.. description: 
.. type: text

I've been really getting into Docker after moving my blog into a container. The containers are pretty impressive, easy to deploy and ofcourse they are flexible. For the very first time I tried to do an assignment on Docker and the task was simple, which is to setup Apache server in a container that is created from a base image (centos). Everything was fine, I pulled an image (centos:latest) and created a container, ran it with bash to login and then I installed httpd (apache server). As the final step, I started the httpd.service by issuing systemctl start httpd. And then I couldn't move to the next step as I get,

  Failed to get D-Bus connection: No connection to service

So, this is what I learned after a some consideration of the issue I faced. A docker container isn't a VM, so it's more like a \*NIX process. Easiest way to run httpd is run it with my own process manager,

.. code-block:: shell

   /usr/sbin/httpd -k start

Now, I'm going to show how it can be run with systemd tools. This is a pain and insecure in certain ways. But let's do it for fun !

1. Create a customized image from the base image, here we delete some unit files of systemd to avoid some issues.

.. listing:: Dockerfile-base docker

2. Build the customized based image.

.. code-block:: shell
   
   docker build -t local/centos-systemd .

3. Create another docker image from the customized base image.
   
.. listing:: Dockerfile-httpd docker
   
4. Build the new image.

.. code-block:: shell
   
   docker build -t local/centos-httpd .
   
5. Create a container based on the new image. While creating, we need to mount cgroups volumes from the host in read only mode (ro).

.. code-block:: shell
   
   docker run -itd --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro -p 80:80 local/centos-httpd

6. Finally, the apache server must be started, and you can check it from a browser (for terminal based, use elinks).

.. code-block:: shell
   
   elinks http://localhost
   
7. Let's check the apache server status.

.. code-block:: shell
   
   docker exec -it <container_name> /bin/bash
   systemctl status httpd


That's it, and I hope this will help someone who's struggeling with systemd containers.

References:
- https://github.com/docker-library/docs/tree/master/centos#systemd-integration
- https://github.com/moby/moby/issues/7459
